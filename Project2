```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
```

```{r}
# load the package
library(tidyverse)
library(ggplot2)

# read the data
data <- read_csv("data.csv")
```

#### Data Process
```{r}
# normalization by lognormal
data$log_tpm<-log(data$TPM+1)
data$log_foldchange<-log(data$FoldChange+1)

# impute the missing values by mean
sum(is.na(data))  
for (i in 1:35){
  data[,i]=impute(data[,i],mean)

# correlation map
library(corrr)
data_corr <- data %>% 
# calculate the correlation by spearman
  cor(method = "spearman")       
rplot(data_corr) +
  theme(axis.text.x = element_text(hjust = 1ï¼Œangle = 35))
 
# Heatmap
library(heatmaply)
heatmaply(data[1,35])
```

#### Explanatory Analysis

# Temperature
```{r}
count_temperature<-factor(c(rep('RC1',2),rep('RH1',2)))
temperature_data<-data.frame(row.names = colnames(dmatrix[,c(1,2,9,10)]),count_temperature)
temperature<- DESeqDataSetFromMatrix(countData = round(dmatrix[,c(1,2,9,10)]*10), data = temperature_data, design=~count_temperature)
data_temperature<- merge(
as.data.frame(temperature[,]), as.data.frame(counts(temperature, normalized=FALSE)), by="row.names")
names(data_temperature)[1] <- "Gene"
data_temperature$threshold[resdata_temperature$pvalue < 0.05 & resdata_temperature$log2FoldChange>0 ] = "up"
data_temperature$threshold[resdata_temperature$pvalue < 0.05 & resdata_temperature$log2FoldChange<0 ] = "down"
data_temperature$threshold[resdata_temperature$pvalue > 0.05 ] = "no_significant"
plot_temperature<-ggplot(data_temperature,aes(x=log2FoldChange/10,y=-log10(pvalue),colour=threshold))+xlab("log2 Fold Change")+ylab("-log10 P-Value")+scale_color_manual(values =c("black","red","blue"))   
plot_temperature
```
# Media
count_media<-factor(c(rep('RC1',2),rep('YC1',2)))
media_data<-data.frame(row.names = colnames(dmatrix[,c(1,2,19,20)]),count_media)
media<-DESeqDataSetFromMatrix(countData = round(dmatrix[,c(1,2,19,20)]*10), data = media_data, design=~count_media)
data_media<- merge(
as.data.frame(results(DESeq(media))[,]),
as.data.frame(counts(media, normalized=FALSE)), by="row.names")
names(data_media)[1] <- "Gene"
data_media$threshold[resdata_media$pvalue < 0.05 & resdata_media$log2FoldChange>0 ] = "up"
data_media$threshold[resdata_media$pvalue < 0.05 & resdata_media$log2FoldChange<0 ] = "down"
data_media$threshold[resdata_media$pvalue > 0.05 ] = "no_significant"
plot_media<-ggplot(data_media,aes(x=log2FoldChange/10,y=-log10(pvalue),colour=threshold))+xlab("log2 Fold Change")+ylab("-log10 P-Value")+scale_color_manual(values =c("black","red","blue"))    
plot_media




#### Cluster
# create a new matrix for cluster
cluster_matrix <- data %>% 
  select(-gene) %>% 
  as.matrix()
rownames(cluster_matrix) <- data$gene
cluster_matrix <- cluster_matrix[genes, ]
cluster_matrix <- cluster_matrix %>% 
  t() %>% 
  scale() %>% 
  t()
  gene_dist <- dist(cluster_matrix)
 gene_cluster <- hclust(gene_dist)
# plot the cluster
plot(gene_cluster)
abline(h = 10, col = "blue") 

# heatmap for cluster
library(ComplexHeatmap)
Heatmap(hclust_matrix)

#### PCA
# create a new matrix for PCA
pca_matrix <- data %>% 
  select(-gene) %>% 
  as.matrix()
rownames(pca_matrix) <- data$gene
pca_matrix <- t(pca_matrix)
sample_pca <- prcomp(pca_matrix)
as_tibble(pca_matrix, rownames = "sample")

tidy(sample_pca, matrix = "eigenvalues") %>% 
  ggplot(aes(x = factor(PC))) +
  geom_col(aes(y = percent)) +
  geom_line(aes(y = cumulative, group = 1)) + 
  geom_point(aes(y = cumulative)) +
  
# plot PCA
sample_pca$x %>% 
  as_tibble(rownames = "sample") %>% 
  ggplot() + geom_point()
